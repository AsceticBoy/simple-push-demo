{"version":3,"names":[],"mappings":"","sources":["scripts/app-controller.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* eslint-env browser */\n\nvar _pushClient = require('./push-client.js');\n\nvar _pushClient2 = _interopRequireDefault(_pushClient);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar AppController = function () {\n  function AppController() {\n    var _this = this;\n\n    _classCallCheck(this, AppController);\n\n    // Define a different server URL here if desire.\n    this._PUSH_SERVER_URL = '';\n    this._API_KEY = 'AIzaSyBBh4ddPa96rQQNxqiq_qQj7sq1JdsNQUQ';\n\n    // This div contains the UI for CURL commands to trigger a push\n    this._sendPushOptions = document.querySelector('.js-send-push-options');\n\n    // Below this comment is code to initialise a material design lite view.\n    var toggleSwitch = document.querySelector('.js-push-toggle-switch');\n    if (toggleSwitch.classList.contains('is-upgraded')) {\n      this.ready = Promise.resolve();\n      this._uiInitialised(toggleSwitch.MaterialSwitch);\n    } else {\n      this.ready = new Promise(function (resolve) {\n        var mdlUpgradeCb = function mdlUpgradeCb() {\n          if (!toggleSwitch.classList.contains('is-upgraded')) {\n            return;\n          }\n\n          _this._uiInitialised(toggleSwitch.MaterialSwitch);\n          document.removeEventListener(mdlUpgradeCb);\n\n          resolve();\n        };\n\n        // This is to wait for MDL initialising\n        document.addEventListener('mdl-componentupgraded', mdlUpgradeCb);\n      });\n    }\n  }\n\n  _createClass(AppController, [{\n    key: '_uiInitialised',\n    value: function _uiInitialised(toggleSwitch) {\n      var _this2 = this;\n\n      this._stateChangeListener = this._stateChangeListener.bind(this);\n      this._subscriptionUpdate = this._subscriptionUpdate.bind(this);\n\n      this._toggleSwitch = toggleSwitch;\n      this._pushClient = new _pushClient2.default(this._stateChangeListener, this._subscriptionUpdate);\n\n      document.querySelector('.js-push-toggle-switch > input').addEventListener('click', function (event) {\n        // Inverted because clicking will change the checked state by\n        // the time we get here\n        if (event.target.checked) {\n          _this2._pushClient.subscribeDevice();\n        } else {\n          _this2._pushClient.unsubscribeDevice();\n        }\n      });\n    }\n  }, {\n    key: 'registerServiceWorker',\n    value: function registerServiceWorker() {\n      var _this3 = this;\n\n      // Check that service workers are supported\n      if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.register('./service-worker.js').catch(function () {\n          _this3.showErrorMessage('Unable to Register SW', 'Sorry this demo requires a service worker to work and it ' + 'was didn\\'t seem to install - sorry :(');\n        });\n      } else {\n        this.showErrorMessage('Service Worker Not Supported', 'Sorry this demo requires service worker support in your browser. ' + 'Please try this demo in Chrome or Firefox Nightly.');\n      }\n    }\n  }, {\n    key: '_stateChangeListener',\n    value: function _stateChangeListener(state, data) {\n      // console.log(state);\n      if (typeof state.interactive !== 'undefined') {\n        if (state.interactive) {\n          this._toggleSwitch.enable();\n        } else {\n          this._toggleSwitch.disable();\n        }\n      }\n\n      if (typeof state.pushEnabled !== 'undefined') {\n        if (state.pushEnabled) {\n          this._toggleSwitch.on();\n        } else {\n          this._toggleSwitch.off();\n        }\n      }\n\n      switch (state.id) {\n        case 'ERROR':\n          this.showErrorMessage('Ooops a Problem Occurred', data);\n          break;\n        default:\n          break;\n      }\n    }\n  }, {\n    key: '_subscriptionUpdate',\n    value: function _subscriptionUpdate(subscription) {\n      var _this4 = this;\n\n      if (!subscription) {\n        // Remove any subscription from your servers if you have\n        // set it up.\n        this._sendPushOptions.style.opacity = 0;\n        return;\n      }\n\n      var curlCommand;\n      if (subscription.endpoint.indexOf('https://android.googleapis.com/gcm/send') === 0) {\n        curlCommand = this.produceGCMProprietaryCURLCommand(subscription);\n      } else {\n        curlCommand = this.produceWebPushProtocolCURLCommand(subscription);\n      }\n\n      var curlCodeElement = document.querySelector('.js-curl-code');\n      curlCodeElement.innerHTML = curlCommand;\n\n      // Code to handle the XHR\n      var sendPushViaXHRButton = document.querySelector('.js-send-push-button');\n      sendPushViaXHRButton.addEventListener('click', function () {\n        _this4.sendPushMessage(subscription);\n      });\n\n      // Display the UI\n      this._sendPushOptions.style.opacity = 1;\n    }\n  }, {\n    key: 'sendPushMessage',\n    value: function sendPushMessage(subscription) {\n      if (subscription.endpoint.indexOf('https://android.googleapis.com/gcm/send') === 0) {\n        this.useGCMProtocol(subscription);\n      } else {\n        this.useWebPushProtocol(subscription);\n      }\n    }\n  }, {\n    key: 'useGCMProtocol',\n    value: function useGCMProtocol(subscription) {\n      var _this5 = this;\n\n      console.log('Sending XHR to GCM Protocol endpoint');\n\n      var headers = new Headers();\n      headers.append('Content-Type', 'application/json');\n      headers.append('Authorization', 'key=' + this._API_KEY);\n\n      var endpointSections = subscription.endpoint.split('/');\n      var subscriptionId = endpointSections[endpointSections.length - 1];\n\n      fetch('https://android.googleapis.com/gcm/send', {\n        method: 'post',\n        headers: headers,\n        body: JSON.stringify({\n          registration_ids: [subscriptionId] // eslint-disable-line camelcase\n        })\n      }).then(function (response) {\n        return response.json();\n      }).then(function (responseObj) {\n        if (responseObj.failure !== 0) {\n          console.log('Failed GCM response: ', responseObj);\n          throw new Error('Failed to send push message via GCM');\n        }\n      }).catch(function (err) {\n        _this5.showErrorMessage('Ooops Unable to Send a Push', err);\n      });\n    }\n  }, {\n    key: 'useWebPushProtocol',\n    value: function useWebPushProtocol(subscription) {\n      var _this6 = this;\n\n      console.log('Sending XHR to Web Push Protocol endpoint');\n\n      fetch(subscription.endpoint, {\n        method: 'post'\n      }).then(function (response) {\n        if (response.status >= 400 && response.status < 500) {\n          console.log('Failed web push response: ', response, response.status);\n          throw new Error('Failed to send push message via web push protocol');\n        }\n      }).catch(function (err) {\n        _this6.showErrorMessage('Ooops Unable to Send a Push', err);\n      });\n    }\n  }, {\n    key: 'produceGCMProprietaryCURLCommand',\n    value: function produceGCMProprietaryCURLCommand(subscription) {\n      var curlEndpoint = 'https://android.googleapis.com/gcm/send';\n      var endpointSections = subscription.endpoint.split('/');\n      var subscriptionId = endpointSections[endpointSections.length - 1];\n      var curlCommand = 'curl --header \"Authorization: key=' + this._API_KEY + '\" --header Content-Type:\"application/json\" ' + curlEndpoint + ' -d \"{\\\\\"registration_ids\\\\\":[\\\\\"' + subscriptionId + '\\\\\"]}\"';\n      return curlCommand;\n    }\n  }, {\n    key: 'produceWebPushProtocolCURLCommand',\n    value: function produceWebPushProtocolCURLCommand(subscription) {\n      var curlEndpoint = subscription.endpoint;\n      var curlCommand = 'curl --request POST ' + curlEndpoint;\n      return curlCommand;\n    }\n  }, {\n    key: 'showErrorMessage',\n    value: function showErrorMessage(title, message) {\n      var errorContainer = document.querySelector('.js-error-message-container');\n\n      var titleElement = errorContainer.querySelector('.js-error-title');\n      var messageElement = errorContainer.querySelector('.js-error-message');\n      titleElement.textContent = title;\n      messageElement.textContent = message;\n      errorContainer.style.opacity = 1;\n\n      var pushOptionsContainer = document.querySelector('.js-send-push-options');\n      pushOptionsContainer.style.display = 'none';\n    }\n  }]);\n\n  return AppController;\n}();\n\nexports.default = AppController;\n\n},{\"./push-client.js\":2}],2:[function(require,module,exports){\n'use strict';\n\n/* eslint-env browser */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar PushClient = function () {\n  function PushClient(stateChangeCb, subscriptionUpdate) {\n    var _this = this;\n\n    _classCallCheck(this, PushClient);\n\n    this._stateChangeCb = stateChangeCb;\n    this._subscriptionUpdate = subscriptionUpdate;\n\n    this._state = {\n      UNSUPPORTED: {\n        id: 'UNSUPPORTED',\n        interactive: false,\n        pushEnabled: false\n      },\n      INITIALISING: {\n        id: 'INITIALISING',\n        interactive: false,\n        pushEnabled: false\n      },\n      PERMISSION_DENIED: {\n        id: 'PERMISSION_DENIED',\n        interactive: false,\n        pushEnabled: false\n      },\n      PERMISSION_GRANTED: {\n        id: 'PERMISSION_GRANTED',\n        interactive: true\n      },\n      PERMISSION_PROMPT: {\n        id: 'PERMISSION_PROMPT',\n        interactive: true,\n        pushEnabled: false\n      },\n      ERROR: {\n        id: 'ERROR',\n        interactive: false,\n        pushEnabled: false\n      },\n      STARTING_SUBSCRIBE: {\n        id: 'STARTING_SUBSCRIBE',\n        interactive: false,\n        pushEnabled: true\n      },\n      SUBSCRIBED: {\n        id: 'SUBSCRIBED',\n        interactive: true,\n        pushEnabled: true\n      },\n      STARTING_UNSUBSCRIBE: {\n        id: 'STARTING_UNSUBSCRIBE',\n        interactive: false,\n        pushEnabled: false\n      },\n      UNSUBSCRIBED: {\n        id: 'UNSUBSCRIBED',\n        interactive: true,\n        pushEnabled: false\n      }\n    };\n\n    if (!('serviceWorker' in navigator)) {\n      this._stateChangeCb(this._state.UNSUPPORTED);\n      return;\n    }\n\n    if (!('PushManager' in window)) {\n      this._stateChangeCb(this._state.UNSUPPORTED);\n      return;\n    }\n\n    if (!('showNotification' in ServiceWorkerRegistration.prototype)) {\n      this._stateChangeCb(this._state.UNSUPPORTED);\n      return;\n    }\n\n    navigator.serviceWorker.ready.then(function () {\n      _this._stateChangeCb(_this._state.INITIALISING);\n      _this.setUpPushPermission();\n    });\n  }\n\n  _createClass(PushClient, [{\n    key: '_permissionStateChange',\n    value: function _permissionStateChange(permissionState) {\n      // If the notification permission is denied, it's a permanent block\n      switch (permissionState) {\n        case 'denied':\n          this._stateChangeCb(this._state.PERMISSION_DENIED);\n          break;\n        case 'granted':\n          this._stateChangeCb(this._state.PERMISSION_GRANTED);\n          break;\n        case 'default':\n          this._stateChangeCb(this._state.PERMISSION_PROMPT);\n          break;\n        default:\n          console.error('Unexpected permission state: ', permissionState);\n          break;\n      }\n    }\n  }, {\n    key: 'setUpPushPermission',\n    value: function setUpPushPermission() {\n      var _this2 = this;\n\n      this._permissionStateChange(Notification.permission);\n\n      return navigator.serviceWorker.ready.then(function (serviceWorkerRegistration) {\n        // Let's see if we have a subscription already\n        return serviceWorkerRegistration.pushManager.getSubscription();\n      }).then(function (subscription) {\n        if (!subscription) {\n          // NOOP since we have no subscription and the permission state\n          // will inform whether to enable or disable the push UI\n          return;\n        }\n\n        _this2._stateChangeCb(_this2._state.SUBSCRIBED);\n\n        // Update the current state with the\n        // subscriptionid and endpoint\n        _this2._subscriptionUpdate(subscription);\n      }).catch(function (err) {\n        console.log(err);\n        _this2._stateChangeCb(_this2._state.ERROR, err);\n      });\n    }\n  }, {\n    key: 'subscribeDevice',\n    value: function subscribeDevice() {\n      var _this3 = this;\n\n      this._stateChangeCb(this._state.STARTING_SUBSCRIBE);\n\n      // We need the service worker registration to access the push manager\n      navigator.serviceWorker.ready.then(function (serviceWorkerRegistration) {\n        return serviceWorkerRegistration.pushManager.subscribe({ userVisibleOnly: true });\n      }).then(function (subscription) {\n        _this3._stateChangeCb(_this3._state.SUBSCRIBED);\n        _this3._subscriptionUpdate(subscription);\n      }).catch(function (subscriptionErr) {\n        // Check for a permission prompt issue\n        _this3._permissionStateChange(Notification.permission);\n\n        if (Notification.permission !== 'denied' && Notification.permission !== 'default') {\n          // If the permission wasnt denied or prompt, that means the\n          // permission was accepted, so this must be an error\n          _this3._stateChangeCb(_this3._state.ERROR, subscriptionErr);\n        }\n      });\n    }\n  }, {\n    key: 'unsubscribeDevice',\n    value: function unsubscribeDevice() {\n      var _this4 = this;\n\n      // Disable the switch so it can't be changed while\n      // we process permissions\n      // window.PushDemo.ui.setPushSwitchDisabled(true);\n\n      this._stateChangeCb(this._state.STARTING_UNSUBSCRIBE);\n\n      navigator.serviceWorker.ready.then(function (serviceWorkerRegistration) {\n        return serviceWorkerRegistration.pushManager.getSubscription();\n      }).then(function (pushSubscription) {\n        // Check we have everything we need to unsubscribe\n        if (!pushSubscription) {\n          _this4._stateChangeCb(_this4._state.UNSUBSCRIBED);\n          _this4._subscriptionUpdate(null);\n          return;\n        }\n\n        // TODO: Remove the device details from the server\n        // i.e. the pushSubscription.subscriptionId and\n        // pushSubscription.endpoint\n        return pushSubscription.unsubscribe().then(function (successful) {\n          if (!successful) {\n            // The unsubscribe was unsuccessful, but we can\n            // remove the subscriptionId from our server\n            // and notifications will stop\n            // This just may be in a bad state when the user returns\n            console.error('We were unable to unregister from push');\n          }\n        });\n      }).then(function () {\n        _this4._stateChangeCb(_this4._state.UNSUBSCRIBED);\n        _this4._subscriptionUpdate(null);\n      }).catch(function (err) {\n        console.error('Error thrown while revoking push notifications. ' + 'Most likely because push was never registered', err);\n      });\n    }\n  }]);\n\n  return PushClient;\n}();\n\nexports.default = PushClient;\n\n},{}]},{},[1]);\n"],"file":"scripts/app-controller.js","sourceRoot":"/source/"}